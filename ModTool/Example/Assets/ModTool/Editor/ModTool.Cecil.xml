<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModTool.Cecil</name>
    </assembly>
    <members>
        <member name="T:ModTool.Cecil.AssemblyFilter">
            <summary>
            Filter mode for finding Assemblies.
            </summary>
        </member>
        <member name="T:ModTool.Cecil.AssemblyUtility">
            <summary>
            Utility for finding Assemblies.
            </summary>
        </member>
        <member name="M:ModTool.Cecil.AssemblyUtility.GetAssemblies(System.String,ModTool.Cecil.AssemblyFilter)">
            <summary>
            Find dll files in a directory and its sub directories.
            </summary>
            <param name="path">The directory to search in.</param>
            <returns>A List of paths to found Assemblies.</returns>
        </member>
        <member name="T:ModTool.Cecil.AssemblyVerifier">
            <summary>
            A class for verifying Assembly files based on a number of Restrictions.
            </summary>
        </member>
        <member name="M:ModTool.Cecil.AssemblyVerifier.VerifyAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verify a list of Assembly files. 
            </summary>
            <param name="assemblies">A collection of paths to Assemblies that will be verified.</param>
            <returns>False if an assembly has failed.</returns>
        </member>
        <member name="T:ModTool.Cecil.CecilExtensions">
            <summary>
            Extension methods for Mono.Cecil.
            </summary>
        </member>
        <member name="M:ModTool.Cecil.CecilExtensions.IsSubClassOf(Mono.Cecil.TypeDefinition,ModTool.Shared.TypeName)">
            <summary>
            Is this Type a subclass of the other Type?
            </summary>
            <param name="self">A TypeDefinition.</param>
            <param name="other">A TypeDefinition.</param>
            <returns>True if this TypeDefinition is a subclass of the other TypeDefinition.</returns>
        </member>
        <member name="M:ModTool.Cecil.CecilExtensions.IsSubClassOf(Mono.Cecil.TypeDefinition,System.String,System.String)">
            <summary>
            Is this Type a subclass of the other Type?
            </summary>
            <param name="self">A TypeDefinition.</param>
            <param name="namespace">A Type's namespace.</param>
            <param name="name">A Type's name.</param>
            <returns>True if this TypeDefinition is a subclass of the Type.</returns>
        </member>
        <member name="M:ModTool.Cecil.CecilExtensions.GetMethod(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Get the first method that matches with methodName.
            </summary>
            <param name="self">A TypeDefinition.</param>
            <param name="methodName">A method's name</param>
            <returns>The MethodDefinition for the method, if found. Null otherwise.</returns>
        </member>
        <member name="M:ModTool.Cecil.CecilExtensions.GetField(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Get the first field that matches with fieldName.
            </summary>
            <param name="self">A TypeDefinition.</param>
            <param name="fieldName">The FieldDefinition for the field, if found. Null otherwise.</param>
            <returns>The FieldDefinition, or null of none was found.</returns>
        </member>
        <member name="M:ModTool.Cecil.CecilExtensions.GetProperty(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Get the first property that matches with propertyName.
            </summary>
            <param name="self">A TypeDefinition.</param>
            <param name="propertyName">The PropertyDefinition for the field, if found. Null otherwise.</param>
            <returns>The PropertyDefinition, or null of none was found.</returns>
        </member>
        <member name="T:ModTool.Cecil.Restriction">
            <summary>
            Base class for restrictions. A restriction either requires or prohibits something.
            </summary>
        </member>
        <member name="M:ModTool.Cecil.Restriction.Verify(ModTool.Shared.RestrictionDef,Mono.Cecil.MemberReference,System.Collections.Generic.List{System.String})">
            <summary>
            Verify a member with this Restriction.
            </summary>
            <param name="member">A member.</param>
            <param name="excludedAssemblies">A List of Assembly names that should be ignored.</param>
            <returns>False if the Member fails the verification.</returns>
        </member>
        <member name="M:ModTool.Cecil.Restriction.Present(Mono.Cecil.MemberReference)">
            <summary>
            Is the Restriction present in the member?
            </summary>
            <param name="member">A member.</param>
            <returns>True if the Restriction is present in the member.</returns>
        </member>
        <member name="M:ModTool.Cecil.Restriction.PresentMethodVariable(Mono.Cecil.Cil.VariableReference)">
            <summary>
            Is the restriction present in a local variable?
            </summary>
            <param name="variable">A local variable</param>
            <returns>True if the restriction is present in the local variable.</returns>
        </member>
        <member name="M:ModTool.Cecil.Restriction.LogMessage(ModTool.Shared.RestrictionDef,Mono.Cecil.MemberReference)">
            <summary>
            Log this Restriction's message.
            </summary>
            <param name="member">The Member to include in the message.</param>
        </member>
        <member name="M:ModTool.Cecil.Restriction.Applicable(ModTool.Shared.RestrictionDef,Mono.Cecil.MemberReference)">
            <summary>
            Is this Restriction applicable to the member?
            </summary>
            <param name="member">A member.</param>
            <returns>True if the Restriction is applicable.</returns>
        </member>
        <member name="M:ModTool.Cecil.Restriction.Applicable(ModTool.Shared.RestrictionDef,Mono.Cecil.TypeReference)">
            <summary>
            Is this Restriction applicable to the Type?
            </summary>
            <param name="type">A Type.</param>
            <returns>True if the Restriction is applicable.</returns>
        </member>
        <member name="T:ModTool.Cecil.NamespaceRestriction">
            <summary>
            A restriction that either requires or prohibits the use of a namespace.
            </summary>
        </member>
        <member name="T:ModTool.Cecil.TypeRestriction">
            <summary>
            A restriction that either requires or prohibits the use of a Type
            </summary>
        </member>
        <member name="T:ModTool.Cecil.InheritanceRestriction">
            <summary>
            A restriction that either requires or prohibits inheritance from a class
            </summary>
        </member>
        <member name="T:ModTool.Cecil.MemberRestriction">
            <summary>
            A restriction that either requires or prohibits the use of a given Type's member
            </summary>
        </member>
    </members>
</doc>
